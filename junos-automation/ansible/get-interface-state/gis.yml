---
- name: GET INTERFACE STATS
  hosts: switches
  roles:
    - Juniper.junos
  connection: local
  gather_facts: no

  tasks:

# -------------------------------------------------------------
#  GET INTERFACE STATS
# -------------------------------------------------------------
  - name: GET INTERFACE STATS via RPC
    juniper_junos_rpc:
      rpcs: get-interface-information
      formats: xml
      kwargs:
        interface_name: ge-0/0/*
        extensive: True
      provider: "{{ provider_vars }}"
    register: int_stats_rpc

# -------------------------------------------------------------
#  DETERMINE LENGTH OF DICTIONARY TO USE FOR ITERATIONS LATER
# -------------------------------------------------------------
  - name: DETERMINE LENGTH OF DICTIONARY
    xml:
      xmlstring: "{{ int_stats_rpc.stdout }}"
      xpath: /interface-information/physical-interface
      count: yes
    register: count

# -------------------------------------------------------------
#  POPULATE CLEAN OUTPUT VAR
# -------------------------------------------------------------
# clean_out|deafult('') initializes the variable as a blank string
# '{:<15}'.format( ) left justifies text in the parentheses with 15 spaces for characters
# with_sequence iterates from 0 to count minus 1. This value is substituted in place of [item|int] for each iteration
# we do from 0 to count minus 1 as Juniper starts interface naming from 0
# The "|int" portion of "[item|int]" was required to force the value for "int" to be an integer
# we use a "| default('')" in the case that the interface XML output doesn't have a value for that iteration, e.g. in situations where the interface is down

  - name: LOAD CLEAN OUTPUT VARIABLE
    set_fact:
      clean_out: "{{ clean_out|default('') + '{:<15}'.format(int_stats_rpc.parsed_output['interface-information']['physical-interface'][item|int]['name']) + '{:<23}'.format(int_stats_rpc.parsed_output['interface-information']['physical-interface'][item|int]['description'] | default('')) + '{:<9}'.format(int_stats_rpc.parsed_output['interface-information']['physical-interface'][item|int]['admin-status']) + '{:<9}'.format(int_stats_rpc.parsed_output['interface-information']['physical-interface'][item|int]['oper-status']) + '{:<13}'.format(int_stats_rpc.parsed_output['interface-information']['physical-interface'][item|int]['ethernet-autonegotiation']['local-info']['local-link-speed'] | default('')) + '{:<15}'.format(int_stats_rpc.parsed_output['interface-information']['physical-interface'][item|int]['ethernet-autonegotiation']['local-info']['local-link-duplexity'] | default('')) + '{:<9}'.format(int_stats_rpc.parsed_output['interface-information']['physical-interface'][item|int]['mtu'] | default('')) + '{:<13}'.format(int_stats_rpc.parsed_output['interface-information']['physical-interface'][item|int]['traffic-statistics']['input-bps'] | default('')) + '{:<13}'.format(int_stats_rpc.parsed_output['interface-information']['physical-interface'][item|int]['traffic-statistics']['output-bps'] | default('')) + '{:<15}'.format(int_stats_rpc.parsed_output['interface-information']['physical-interface'][item|int]['input-error-list']['input-errors'] | default('')) + '{:<15}'.format(int_stats_rpc.parsed_output['interface-information']['physical-interface'][item|int]['output-error-list']['output-errors'] | default('')) + '\n'}}"
    with_sequence: start=0 end="{{ count.count - 1 }}" stride=1

# -------------------------------------------------------------
#  OUTPUT HEADERS AND CLEAN VAR, SPLIT ON \n
# -------------------------------------------------------------
# Print a line of column headers, then the output of clean out. Each iteration of the loop above included "\n" in the concatenation, so we can split on that with the msg.split() formatting

  - name: DISPLAY INTERFACE STATUS WITH COLUMN HEADERS
    vars:
      msg: |
            Interface:     Description:           Admin:   Oper:    Speed:       Duplex:        MTU:     Input(bps):  Output(bps): Input errors:  Output errors:
            {{ clean_out }}
    debug:
      msg: "{{ msg.split('\n') }}"

...
