---
- name: GET INTERFACE STATS
  hosts: switches
  roles:
    - Juniper.junos
  connection: local
  gather_facts: no

  tasks:

# -------------------------------------------------------------
#  GET INTERFACE STATS
# -------------------------------------------------------------
  - name: GET INTERFACE STATS via RPC
    juniper_junos_rpc:
      rpcs: get-interface-information
      formats: xml
      kwargs:
        interface_name: ge-0/0/*
      provider: "{{ provider_vars }}"
    register: int_stats_rpc

# -------------------------------------------------------------
#  LOAD INTERFACE STATS INTO "int_name" TO QUERY ON .matches
# -------------------------------------------------------------
  - name: XPATH THE INTERFACE NAME
    xml:
      xmlstring: "{{ int_stats_rpc.stdout }}"
      xpath: /interface-information/physical-interface/name
      content: text
    register: int_name

#  - name: debug int name
#    debug:
#      var: int_name
#
#  - name: debug int_name
#    debug:
#      var: int_name.matches
#
#  - name: debug int_name
#    debug:
#      var: (int_name.matches[0] | type_debug)

# -------------------------------------------------------------
#  CREATE INTERFACE LIST TO LOOP "show interfaces" OVER
# -------------------------------------------------------------
  - name: CREATE INTERFACE LIST
    set_fact:
      int_list: "{{ int_name.matches | map(attribute='name') | list }}"
    with_sequence: start=0 end="{{ int_name.count - 1 }}" stride=1

#  - name: DEBUG INT LIST
#    debug:
#      var: (int_list | type_debug)
#
#  - name: DEBUG INT LIST
#    debug:
#      var: int_list

  # - fail:

# -------------------------------------------------------------
#  LOOP INTERFACE LIST TO LOAD "int_stats_cmd" VARIABLE
# -------------------------------------------------------------
  - name: GET INTERFACE STATS via COMMAND
    juniper_junos_command:
      command: "show interfaces {{item}} extensive"
      formats: xml
      provider: "{{ provider_vars }}"
    loop: "{{ int_list }}"
    register: int_stats_cmd

#  - name: debug int_stats_cmd
#    debug:
#      var: int_stats_cmd

#  - fail:

# -------------------------------------------------------------
#  DISPLAY COLUMN HEADERS AND INTERFACE STATS
#  COLUMNS ARE LEFT JUSTIFIED, 14 or 28 CHARS FIXED WIDTH
# -------------------------------------------------------------

  - name: DISPLAY INTERFACE COLUMN HEADERS
    vars:
      msg: |
            Interface:     Description:                 Admin:         Oper:          Speed:         Duplex:        MTU:           Input (bps):   Output(bps):  "
            {{ '{:<14}'.format(item.parsed_output['interface-information']['physical-interface']['name']) }} {{ '{:<28}'.format(item.parsed_output['interface-information']['physical-interface']['description'] | default('na')) }} {{ '{:<14}'.format(item.parsed_output['interface-information']['physical-interface']['admin-status'] | default('na')) }} {{ '{:<14}'.format(item.parsed_output['interface-information']['physical-interface']['oper-status'] | default('na')) }} {{ '{:<14}'.format(item.parsed_output['interface-information']['physical-interface']['ethernet-autonegotiation']['local-info']['local-link-speed'] | default('na')) }} {{ '{:<14}'.format(item.parsed_output['interface-information']['physical-interface']['ethernet-autonegotiation']['local-info']['local-link-duplexity'] | default('na')) }} {{ '{:<14}'.format(item.parsed_output['interface-information']['physical-interface']['mtu'] | default('na')) }} {{ '{:<14}'.format(item.parsed_output['interface-information']['physical-interface']['traffic-statistics']['input-bps'] | default('na')) }} {{ '{:<14}'.format(item.parsed_output['interface-information']['physical-interface']['traffic-statistics']['output-bps'] | default('na')) }}
    loop: "{{ int_stats_cmd.results }}"
    loop_control:
      label: "{{ item.invocation.module_args.host }}"
    debug:
      msg: "{{ msg.split('\n') }}"

...
